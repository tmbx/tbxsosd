#
# Copyright (C) 2006-2012 Opersys inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
Import('libdb libfilters libutils libcomm env conf_options prefix bindir')

tbxsosd_FILES = [
    'child.c',
    'childset.c',
    'client.c',
    'client_req_dpkg.c',
    'client_req_key.c',
    'client_req_kws.c',
    'client_req_login.c',
    'client_req_misc.c',
    'client_req_otut.c',
    'client_req_pkg.c',
    'dpkg.c',
    'main.c',
    'otut.c',
    'package.c',
    'packet.c',
    'podder.c',
    'proto.c',
    'proto_defs.c',
    'proto_funcs.c',
    'server.c',
    'signals.c']

shared_FILES = ['license.c',
                'keys.c',
                'shared.c']

kctl_FILES = ['kctl.c']

tbxsosdcfg_FILES = ['tbxsosdcfg.c']

# Setup the correct config file path.  If the single_dir option is set
# to yes, set the config file path variable to the name of the config
# file
conf_options['config_path'] = str(env['CONFDIR'])

def config_h_build(target, source, env):
    config_h_defines = conf_options
  
    for a_target, a_source in zip(target, source):
        config_h = file(str(a_target), "w")
        config_h_in = file(str(a_source), "r")
        config_h.write(config_h_in.read() % config_h_defines)
        config_h_in.close()
        config_h.close()

def kctl_link(target, source, env):
    for a_target, a_source in zip(target, source):
        if not os.path.exists(str(a_target)):
            os.symlink(str(a_source), str(a_target))

shared_OBJS = []
tbxsosd_OBJS = []
tbxsosdcfg_OBJS = []
kctl_OBJS = []

cpp_path = env['CPPPATH'] + ["#."]

for s in shared_FILES:
    n = os.path.splitext(s)[0]
    o = env.Object(target = 'build/' + n, source = s, CPPPATH = cpp_path)
    shared_OBJS.append(o);

for s in tbxsosdcfg_FILES:
    n = os.path.splitext(s)[0]
    o = env.Object(target = 'build/' + n, source = s, CPPPATH = cpp_path)
    tbxsosdcfg_OBJS.append(o)

for s in tbxsosd_FILES:
    n = os.path.splitext(s)[0]
    o = env.Object(target = 'build/' + n, source = s, CPPPATH = cpp_path)
    tbxsosd_OBJS.append(o)

for s in kctl_FILES:
    n = os.path.splitext(s)[0]
    o = env.Object(target = 'build/' + n, source = s, CPPPATH = cpp_path)
    kctl_OBJS.append(o)

tbxsosd_OBJS += shared_OBJS
kctl_OBJS += shared_OBJS
tbxsosdcfg_OBJS += shared_OBJS

env.AlwaysBuild(env.Command('#common/config.h', '#common/config.h.in', config_h_build))

# Add the configuration file targets
prog_tbxsosd = env.Program('tbxsosd',
                           tbxsosd_OBJS + libdb + libfilters + libutils + libcomm,
                           LIBS = env['LIBS'] + env['tbxsosd_LIBS'])
prog_kctlbin = env.Program('kctlbin',
                           kctl_OBJS + libdb + libcomm + libutils)
prog_tbxsosdcfg = env.Program('tbxsosdcfg', 
                              tbxsosdcfg_OBJS + libutils + libdb,
                              LIBS = env['LIBS'] + env['tbxsosd_LIBS'])

if 'install' in COMMAND_LINE_TARGETS and not env.GetOption('clean'):   
    # No install required in local directory.
    if bindir != '.':
        env.Install(bindir, prog_tbxsosd)
        env.Install(bindir, prog_kctlbin)
        env.Install(bindir, prog_tbxsosdcfg)
